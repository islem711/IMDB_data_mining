type = "pie",
marker = list(colors = colors),
textposition = "inside",
textinfo = "percent+label",
hoverinfo = "label+percent",
title = "Genres des films"
)
library(ggplot2)
library(dplyr)
# Compter le nombre de films par rating
film_per_rating <- mydata %>%
group_by(rating) %>%
summarize(n = n())
# Tracer un histogramme du rating des films
ggplot(data = film_per_rating, aes(x = rating, y = n)) +
geom_bar(stat = "identity", color = "black", fill = "gray", alpha = 0.5) +
labs(title = "Histogramme du rating des films", x = "Rating", y = "Nombre de films")
mydata_3 <- mydata
# renommer les colonnes à partir de la 13ème colonne jusqu'à la dernière colonne
names(mydata_3)[5:28] <- paste0("genre_", names(mydata_3)[5:28])
# Charger les packages nécessaires
library(plotly)
library(dplyr)
# Récupérer les films avec rating >= 8
rated_df <- filter(mydata_3, rating >= 8)
# Sélectionner les colonnes des genres
genre_cols <- names(rated_df)[14:36]
# Compter le nombre de films par genre
genre_counts <- colSums(rated_df[, genre_cols])
# Créer un data frame avec les résultats
genre_df <- data.frame(Genre = names(genre_counts),
Count = genre_counts)
# Créer le graphique à barres interactif avec Plotly
plot_ly(genre_df, x = ~Genre, y = ~Count, type = 'bar',
name = "Genres", marker = list(color = 'blue'),
xaxis = list(title = "Genres"),
yaxis = list(title = "Nombre de films"),
text = ~paste("Genre: ", Genre, "<br>", "Count: ", Count)) %>%
layout(title = "Distribution des genres pour les films avec un rating >= 8")
# Charger les packages nécessaires
library(plotly)
library(dplyr)
# Récupérer les films avec rating >= 8
rated_df <- filter(mydata_3, rating >= 8)
# Sélectionner les colonnes des genres
genre_cols <- names(rated_df)[5:28]
# Compter le nombre de films par genre
genre_counts <- colSums(rated_df[, genre_cols])
# Créer un data frame avec les résultats
genre_df <- data.frame(Genre = names(genre_counts),
Count = genre_counts)
# Créer le graphique à barres interactif avec Plotly
plot_ly(genre_df, x = ~Genre, y = ~Count, type = 'bar',
name = "Genres", marker = list(color = 'blue'),
xaxis = list(title = "Genres"),
yaxis = list(title = "Nombre de films"),
text = ~paste("Genre: ", Genre, "<br>", "Count: ", Count)) %>%
layout(title = "Distribution des genres pour les films avec un rating >= 8")
library(ggplot2)
# récupérer les films de genre "Drama" avec un rating >= 8
drama_high_rating <- subset(mydata_3, mydata_3$genre_Drama == 1 & mydata_3$rating >= 8)
# calculer la moyenne des ratings par année
drama_high_rating_by_year <- drama_high_rating %>%
group_by(year) %>%
summarise(avg_rating = mean(rating))
# tracer la courbe
ggplot(drama_high_rating_by_year, aes(x = year, y = avg_rating)) +
geom_line() +
labs(x = "Année de sortie", y = "Moyenne du rating",
title = "Moyenne du rating des films de genre 'Drama' avec un rating >= 8 par année")
library(dplyr)
library(ggplot2)
# 1. Créer une nouvelle colonne pour l'année décennale
mydata_3$decade <- as.integer(floor(mydata_3$year/10) * 10)
# 2. Sélectionner les films de genre 'Drama' avec un rating >= 8
drama_movies <- mydata_3 %>% filter(genre_Drama == 1 & rating >= 8)
# 3. Calculer la moyenne de rating par année décennale
drama_ratings <- drama_movies %>%
group_by(decade) %>%
summarise(avg_rating = mean(rating))
# 4. Créer le graphique
ggplot(drama_ratings, aes(x = decade, y = avg_rating)) +
geom_line(color = "red") +
scale_x_continuous(breaks = seq(min(drama_ratings$decade), max(drama_ratings$decade), by = 10)) +
labs(x = "Décennie", y = "Moyenne de rating", title = "Moyenne de rating pour les films de genre 'Drama'")
library(ggplot2)
ggplot(mydata_3, aes(x = decade, y = rating, color = rating)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
# Charger les packages nécessaires
library(plotly)
library(dplyr)
# Récupérer les films avec rating >= 8
hight_rated_df <- filter(mydata_3, rating >= 8)
low_rated_df <- filter(mydata_3, rating <= 4)
# Sélectionner les colonnes des genres
high_genre_cols <- names(hight_rated_df)[5:28]
low_genre_cols <- names(low_rated_df)[5:28]
# Compter le nombre de films par genre
high_genre_counts <- colSums(high_genre_cols[, high_genre_cols])
# Charger les packages nécessaires
library(plotly)
library(dplyr)
# Récupérer les films avec rating >= 8
rated_df <- filter(mydata_3, rating >= 8)
# Sélectionner les colonnes des genres
genre_cols <- names(rated_df)[5:28]
# Compter le nombre de films par genre
genre_counts <- colSums(rated_df[, genre_cols])
# Créer un data frame avec les résultats
genre_df <- data.frame(Genre = names(genre_counts),
Count = genre_counts)
# Créer le graphique à barres interactif avec Plotly
plot_ly(genre_df, x = ~Genre, y = ~Count, type = 'bar',
name = "Genres", marker = list(color = 'blue'),
xaxis = list(title = "Genres"),
yaxis = list(title = "Nombre de films"),
text = ~paste("Genre: ", Genre, "<br>", "Count: ", Count)) %>%
layout(title = "Distribution des genres pour les films avec un rating >= 8")
# Récupérer les films avec rating >= 8
rated_df <- filter(mydata_3, rating <= 4)
# Sélectionner les colonnes des genres
genre_cols <- names(rated_df)[5:28]
# Compter le nombre de films par genre
genre_counts <- colSums(rated_df[, genre_cols])
# Créer un data frame avec les résultats
genre_df <- data.frame(Genre = names(genre_counts),
Count = genre_counts)
# Créer le graphique à barres interactif avec Plotly
plot_ly(genre_df, x = ~Genre, y = ~Count, type = 'bar',
name = "Genres", marker = list(color = 'blue'),
xaxis = list(title = "Genres"),
yaxis = list(title = "Nombre de films"),
text = ~paste("Genre: ", Genre, "<br>", "Count: ", Count)) %>%
layout(title = "Distribution des genres pour les films avec un rating <= 4")
# Récupérer les films avec rating >= 8
rated_df <- filter(mydata_3, rating <= 4)
# Sélectionner les colonnes des genres
genre_cols <- names(rated_df)[5:28]
# Compter le nombre de films par genre
genre_counts <- colSums(rated_df[, genre_cols])
# Créer un data frame avec les résultats
genre_df <- data.frame(Genre = names(genre_counts),
Count = genre_counts)
# Créer le graphique à barres interactif avec Plotly
plot_ly(genre_df, x = ~Genre, y = ~Count, type = 'bar',
name = "Genres", marker = list(color = 'red'),
xaxis = list(title = "Genres"),
yaxis = list(title = "Nombre de films"),
text = ~paste("Genre: ", Genre, "<br>", "Count: ", Count)) %>%
layout(title = "Distribution des genres pour les films avec un rating <= 4")
library(ggplot2)
library(dplyr)
# Compter le nombre de films par rating
film_per_rating <- mydata %>%
group_by(rating) %>%
summarize(n = n())
# Tracer un histogramme du rating des films
ggplot(data = film_per_rating, aes(x = rating, y = n)) +
geom_bar(stat = "identity", color = "black", fill = "gray", alpha = 0.5) +
labs(title = "Histogramme du rating des films", x = "Rating", y = "Nombre de films")
library(plotly)
# Calculer les proportions de chaque genre
genres <- colSums(mydata[, 5:28]) / nrow(mydata)
# Créer un vecteur de couleurs pour les secteurs
colors <- c("#1f77b4", "#ff7f0e", "#2ca02c")
# Créer un graphique camembert interactif avec plotly
plot_ly(
labels = names(genres),
values = genres,
type = "pie",
marker = list(colors = colors),
textposition = "inside",
textinfo = "percent+label",
hoverinfo = "label+percent",
title = "Genres des films"
)
library(ggplot2)
ggplot(mydata_3, aes(x = decade, y = rating, color = rating)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
setwd("C:/Users/utilisateur/Desktop/data_mining_project")
directory <- "./dataset"
files <- list.files(directory, pattern = ".csv")
data_list <- lapply(files, function(file) read.csv(file.path(directory, file)))
mydata <- do.call(rbind, data_list)
mydata
library(tidyr)
library(fastDummies)
mydata$gross.in... <- NULL
mydata$star_id <- NULL
mydata$director_id <- NULL
mydata$description <- NULL
#We delete the movies without rating
mydata <- mydata[complete.cases(mydata$rating), ]
#We delete the movies without runtime
mydata <- mydata[complete.cases(mydata$runtime), ]
#We delete the movies without votes
mydata <- mydata[complete.cases(mydata$votes), ]
# to be sure we delete every NA value in the dataset
mydata <- na.omit(mydata)
#we delete all the duplicated movies in the dataset
mydata <- unique(mydata, by = "movie_id")
# Supprimer le texte "min" de la colonne "runtime"
mydata$runtime <- gsub("min", "", mydata$runtime)
# Convertir la colonne "runtime" en type numérique
mydata$runtime <- as.numeric(mydata$runtime)
# Convertir la colonne "year" en type numérique
mydata$year <- as.numeric(mydata$year)
colSums(is.na(mydata))
# utiliser separate() pour créer une colonne pour chaque valeur dans "genres"
mydata <- mydata %>% separate_rows(genre, sep = ", ") %>%
pivot_wider(names_from = genre, values_from = genre, values_fn = length, values_fill = 0)
mydata
library(tidyr)
library(dplyr)
library(stringr)
#on prends une copie de la dataframe (pour analyser les artists)
mydata_2 <- mydata
# Séparez les artistes de chaque cellule en rangées séparées
mydata_2 <- mydata_2 %>% separate_rows(star, sep = ", \n")
#Supprimer les espaces blancs de début et de fin dans les noms d'artistes
mydata_2$star <- str_trim(mydata_2$star)
#on group les données par chaque artist
mydata_2 <- mydata_2 %>%
group_by(star) %>%
mutate(artist_rating = mean(rating)) %>%
ungroup()
mydata_2
# Regroupez les données par artiste et comptez le nombre de films dans lesquels chaque artiste a été
star_data <- mydata_2 %>%
group_by(star) %>%
tally()
# Renommez la colonne en "movie per artist"
star_data <- rename(star_data, "movie_per_star" = n)
star_data <- arrange(star_data, desc(movie_per_star))
#plot les 20 artist le plus productifs
library(ggplot2)
top20_productive_stars = star_data[2:21,]
ggplot(top20_productive_stars, aes(x = star, y = movie_per_star, fill = star)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(title = "top20_acteurs_prroductifs",
x = "Acteur",
y = "Nombre de films")
# plot les notes moyennes des top 20 artist
top20 <- head(mydata_2[order(-mydata_2$artist_rating),], 20)
# Création du diagramme de dispersion
ggplot(top20, aes(x = movie_name, y = star )) +
geom_point(aes(size = artist_rating, color = artist_rating)) +
scale_size_continuous(range = c(2, 8)) +
labs(x = "film", y = "artiste", title = "Notes des artistes pour les films") +
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
mydata <- dummy_cols(mydata, select_columns = "certificate")
mydata$certificate <- NULL
mydata$star <- NULL
mydata
library(ggplot2)
library(dplyr)
# Compter le nombre de films par rating
film_per_rating <- mydata %>%
group_by(rating) %>%
summarize(n = n())
# Tracer un histogramme du rating des films
ggplot(data = film_per_rating, aes(x = rating, y = n)) +
geom_bar(stat = "identity", color = "black", fill = "gray", alpha = 0.5) +
labs(title = "Histogramme du rating des films", x = "Rating", y = "Nombre de films")
#on prends une copie de la dataframe (pour analyser les artists)
mydata$movie_name <- NULL
mydata$movie_id <- NULL
mydata$director <- NULL
# installer et charger la librairie arules
library(arules)
# créer une matrice binaire de transactions à partir de la dataframe
transactions_mat <- as.matrix(mydata)
# remplacer les valeurs manquantes par 0
transactions_mat[is.na(transactions_mat)] <- 0
transactions_mat[transactions_mat > 0] <- 1
# convertir la matrice de transactions en un objet "transactions" de la librairie arules
transactions_obj <- as(transactions_mat, "transactions")
# appliquer la fonction apriori pour extraire les règles d'association
rules <- apriori(transactions_obj, parameter = list(support = 0.1, confidence = 0.5, minlen = 2))
# afficher les règles d'association
inspect(rules)
library(plotly)
# Calculer les proportions de chaque genre
genres <- colSums(mydata[, 5:28]) / nrow(mydata)
# Créer un vecteur de couleurs pour les secteurs
colors <- c("#1f77b4", "#ff7f0e", "#2ca02c")
# Créer un graphique camembert interactif avec plotly
plot_ly(
labels = names(genres),
values = genres,
type = "pie",
marker = list(colors = colors),
textposition = "inside",
textinfo = "percent+label",
hoverinfo = "label+percent",
title = "Genres des films"
)
mydata_3 <- mydata
# renommer les colonnes à partir de la 13ème colonne jusqu'à la dernière colonne
names(mydata_3)[5:28] <- paste0("genre_", names(mydata_3)[5:28])
# Charger les packages nécessaires
library(plotly)
library(dplyr)
# Récupérer les films avec rating >= 8
rated_df <- filter(mydata_3, rating >= 8)
# Sélectionner les colonnes des genres
genre_cols <- names(rated_df)[5:28]
# Compter le nombre de films par genre
genre_counts <- colSums(rated_df[, genre_cols])
# Créer un data frame avec les résultats
genre_df <- data.frame(Genre = names(genre_counts),
Count = genre_counts)
# Créer le graphique à barres interactif avec Plotly
plot_ly(genre_df, x = ~Genre, y = ~Count, type = 'bar',
name = "Genres", marker = list(color = 'blue'),
xaxis = list(title = "Genres"),
yaxis = list(title = "Nombre de films"),
text = ~paste("Genre: ", Genre, "<br>", "Count: ", Count)) %>%
layout(title = "Distribution des genres pour les films avec un rating >= 8")
# Récupérer les films avec rating >= 8
rated_df <- filter(mydata_3, rating <= 4)
# Sélectionner les colonnes des genres
genre_cols <- names(rated_df)[5:28]
# Compter le nombre de films par genre
genre_counts <- colSums(rated_df[, genre_cols])
# Créer un data frame avec les résultats
genre_df <- data.frame(Genre = names(genre_counts),
Count = genre_counts)
# Créer le graphique à barres interactif avec Plotly
plot_ly(genre_df, x = ~Genre, y = ~Count, type = 'bar',
name = "Genres", marker = list(color = 'red'),
xaxis = list(title = "Genres"),
yaxis = list(title = "Nombre de films"),
text = ~paste("Genre: ", Genre, "<br>", "Count: ", Count)) %>%
layout(title = "Distribution des genres pour les films avec un rating <= 4")
library(ggplot2)
ggplot(mydata_3, aes(x = decade, y = rating, color = rating)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
library(ggplot2)
# 1. Créer une nouvelle colonne pour l'année décennale
mydata_3$decade <- as.integer(floor(mydata_3$year/10) * 10)
ggplot(mydata_3, aes(x = decade, y = rating, color = rating)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
library(ggplot2)
# Create a subset of data with only movies with rating 10
movies_rating_10 <- subset(mydata_3, rating == 10)
# Calculate the total number of movies in each genre
genre_count <- colSums(movies_rating_10[,14:36])
# Create a data frame with the genre counts and names
genre_data <- data.frame(genre = names(genre_count), count = genre_count)
# Create the pie chart with ggplot2
ggplot(genre_data, aes(x="", y=count, fill=genre)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
scale_fill_brewer(palette="Set3") +
theme_void() +
labs(title="Movies with Rating 10 by Genre")
# Filtrer les films ayant une note de 9.9 ou plus
high_rated_movies <- mydata_3[mydata_3$rating >= 9.9,]
# Créer le graphique en barres verticales
library(ggplot2)
ggplot(high_rated_movies, aes(x=rating, y=movie_name)) +
geom_bar(stat="identity") +
labs(x="Rating", y="Movie name") +
ggtitle("Movies with rating >= 9.9")
#Comportement des rating en fonction des runtime
ggplot(mydata_3, aes(x=runtime, y=rating)) +
# ajouter des points
geom_point() +
# ajouter une étiquette pour l'axe x
xlab("Runtime") +
# ajouter une étiquette pour l'axe y
ylab("Rating") +
# ajouter un titre
ggtitle("Comportement des rating en fonction des runtime")
#Comportement des rating en fonction des runtime
mean_ratings <- aggregate(rating ~ runtime, mydata_3, mean)
ggplot(mean_ratings, aes(x=runtime, y=rating)) +
# ajouter une courbe
geom_line() +
# ajouter une étiquette pour l'axe x
xlab("Runtime") +
# ajouter une étiquette pour l'axe y
ylab("Rating moyen") +
# ajouter un titre
ggtitle("Comportement des ratings moyens en fonction des runtimes")
#Comportement des rating en fonction des runtime
mean_ratings <- aggregate(rating ~ runtime, mydata_3, mean)
ggplot(mean_ratings, aes(x=runtime, y=rating)) +
color = "red" +
# ajouter une courbe
geom_line() +
# ajouter une étiquette pour l'axe x
xlab("Runtime") +
# ajouter une étiquette pour l'axe y
ylab("Rating moyen") +
# ajouter un titre
ggtitle("Comportement des ratings moyens en fonction des runtimes")
#Comportement des rating en fonction des runtime
mean_ratings <- aggregate(rating ~ runtime, mydata_3, mean)
ggplot(mean_ratings, aes(x=runtime, y=rating)) +
color('red') +
# ajouter une courbe
geom_line() +
# ajouter une étiquette pour l'axe x
xlab("Runtime") +
# ajouter une étiquette pour l'axe y
ylab("Rating moyen") +
# ajouter un titre
ggtitle("Comportement des ratings moyens en fonction des runtimes")
#Comportement des rating en fonction des runtime
mean_ratings <- aggregate(rating ~ runtime, mydata_3, mean)
ggplot(mean_ratings, aes(x=runtime, y=rating)) +
color(red) +
# ajouter une courbe
geom_line() +
# ajouter une étiquette pour l'axe x
xlab("Runtime") +
# ajouter une étiquette pour l'axe y
ylab("Rating moyen") +
# ajouter un titre
ggtitle("Comportement des ratings moyens en fonction des runtimes")
#Comportement des rating en fonction des runtime
mean_ratings <- aggregate(rating ~ runtime, mydata_3, mean)
ggplot(mean_ratings, aes(x=runtime, y=rating)) +
# ajouter une courbe
geom_line() +
# ajouter une étiquette pour l'axe x
xlab("Runtime") +
# ajouter une étiquette pour l'axe y
ylab("Rating moyen") +
# ajouter un titre
ggtitle("Comportement des ratings moyens en fonction des runtimes")
#Comportement des rating en fonction des runtime
mean_ratings <- aggregate(rating ~ runtime, mydata_3, mean)
ggplot(mean_ratings, aes(x=runtime, y=rating),colorbar('red')) +
# ajouter une courbe
geom_line() +
# ajouter une étiquette pour l'axe x
xlab("Runtime") +
# ajouter une étiquette pour l'axe y
ylab("Rating moyen") +
# ajouter un titre
ggtitle("Comportement des ratings moyens en fonction des runtimes")
#Comportement des rating en fonction des runtime
mean_ratings <- aggregate(rating ~ runtime, mydata_3, mean)
ggplot(mean_ratings, aes(x=runtime, y=rating),color('red')) +
# ajouter une courbe
geom_line() +
# ajouter une étiquette pour l'axe x
xlab("Runtime") +
# ajouter une étiquette pour l'axe y
ylab("Rating moyen") +
# ajouter un titre
ggtitle("Comportement des ratings moyens en fonction des runtimes")
#Comportement des rating en fonction des runtime
mean_ratings <- aggregate(rating ~ runtime, mydata_3, mean)
ggplot(mean_ratings, aes(x=runtime, y=rating)) +
# ajouter une courbe
geom_line() +
# ajouter une étiquette pour l'axe x
xlab("Runtime") +
# ajouter une étiquette pour l'axe y
ylab("Rating moyen") +
# ajouter un titre
ggtitle("Comportement des ratings moyens en fonction des runtimes")
<h1> votes => rating </h1>
#Comportement des rating en fonction des runtime
mean_ratings <- aggregate(rating ~ votes, mydata_3, mean)
ggplot(mean_ratings, aes(x=votes, y=rating)) +
# ajouter une courbe
geom_line() +
# ajouter une étiquette pour l'axe x
xlab("nbr_votes") +
# ajouter une étiquette pour l'axe y
ylab("Rating moyen") +
# ajouter un titre
ggtitle("Comportement des ratings moyens en fonction des votes")
#Comportement des rating en fonction des runtime
ggplot(mydata_3, aes(x=votes, y=rating)) +
# ajouter une courbe
geom_line() +
# ajouter une étiquette pour l'axe x
xlab("nbr_votes") +
# ajouter une étiquette pour l'axe y
ylab("Rating moyen") +
# ajouter un titre
ggtitle("Comportement des ratings moyens en fonction des votes")
#Comportement des rating en fonction des runtime
mean_ratings <- aggregate(rating ~ votes, mydata_3, mean)
ggplot(mean_ratings, aes(x=votes, y=rating)) +
# ajouter une courbe
geom_line() +
# ajouter une étiquette pour l'axe x
xlab("nbr_votes") +
# ajouter une étiquette pour l'axe y
ylab("Rating moyen") +
# ajouter un titre
ggtitle("Comportement des ratings moyens en fonction des votes")
library("caret") # pour la sélection de modèle et l'évaluation de performance
install.packages("caret")
install.packages("caret")
library(tidyr)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
